{"ast":null,"code":"/**\n * @license Angular v17.3.8\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ɵChangeDetectionScheduler, ɵRuntimeError, Injectable, ɵperformanceMarkFeature, makeEnvironmentProviders, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2 } from '@angular/platform-browser';\nconst ANIMATION_PREFIX = '@';\nclass AsyncAnimationRendererFactory {\n  /**\n   *\n   * @param moduleImpl allows to provide a mock implmentation (or will load the animation module)\n   */\n  constructor(doc, delegate, zone, animationType, moduleImpl) {\n    this.doc = doc;\n    this.delegate = delegate;\n    this.zone = zone;\n    this.animationType = animationType;\n    this.moduleImpl = moduleImpl;\n    this._rendererFactoryPromise = null;\n    this.scheduler = inject(ɵChangeDetectionScheduler, {\n      optional: true\n    });\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    // When the root view is removed, the renderer defers the actual work to the\n    // `TransitionAnimationEngine` to do this, and the `TransitionAnimationEngine` doesn't actually\n    // remove the DOM node, but just calls `markElementAsRemoved()`. The actual DOM node is not\n    // removed until `TransitionAnimationEngine` \"flushes\".\n    // Note: we already flush on destroy within the `InjectableAnimationEngine`. The injectable\n    // engine is not provided when async animations are used.\n    this._engine?.flush();\n  }\n  /**\n   * @internal\n   */\n  loadImpl() {\n    const moduleImpl = this.moduleImpl ?? import('@angular/animations/browser');\n    return moduleImpl.catch(e => {\n      throw new ɵRuntimeError(5300 /* RuntimeErrorCode.ANIMATION_RENDERER_ASYNC_LOADING_FAILURE */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Async loading for animations package was ' + 'enabled, but loading failed. Angular falls back to using regular rendering. ' + 'No animations will be displayed and their styles won\\'t be applied.');\n    }).then(({\n      ɵcreateEngine,\n      ɵAnimationRendererFactory\n    }) => {\n      // We can't create the renderer yet because we might need the hostElement and the type\n      // Both are provided in createRenderer().\n      this._engine = ɵcreateEngine(this.animationType, this.doc, this.scheduler);\n      const rendererFactory = new ɵAnimationRendererFactory(this.delegate, this._engine, this.zone);\n      this.delegate = rendererFactory;\n      return rendererFactory;\n    });\n  }\n  /**\n   * This method is delegating the renderer creation to the factories.\n   * It uses default factory while the animation factory isn't loaded\n   * and will rely on the animation factory once it is loaded.\n   *\n   * Calling this method will trigger as side effect the loading of the animation module\n   * if the renderered component uses animations.\n   */\n  createRenderer(hostElement, rendererType) {\n    const renderer = this.delegate.createRenderer(hostElement, rendererType);\n    if (renderer.ɵtype === 0 /* AnimationRendererType.Regular */) {\n      // The factory is already loaded, this is an animation renderer\n      return renderer;\n    }\n    // We need to prevent the DomRenderer to throw an error because of synthetic properties\n    if (typeof renderer.throwOnSyntheticProps === 'boolean') {\n      renderer.throwOnSyntheticProps = false;\n    }\n    // Using a dynamic renderer to switch the renderer implementation once the module is loaded.\n    const dynamicRenderer = new DynamicDelegationRenderer(renderer);\n    // Kick off the module loading if the component uses animations but the module hasn't been\n    // loaded yet.\n    if (rendererType?.data?.['animation'] && !this._rendererFactoryPromise) {\n      this._rendererFactoryPromise = this.loadImpl();\n    }\n    this._rendererFactoryPromise?.then(animationRendererFactory => {\n      const animationRenderer = animationRendererFactory.createRenderer(hostElement, rendererType);\n      dynamicRenderer.use(animationRenderer);\n    }).catch(e => {\n      // Permanently use regular renderer when loading fails.\n      dynamicRenderer.use(renderer);\n    });\n    return dynamicRenderer;\n  }\n  begin() {\n    this.delegate.begin?.();\n  }\n  end() {\n    this.delegate.end?.();\n  }\n  whenRenderingDone() {\n    return this.delegate.whenRenderingDone?.() ?? Promise.resolve();\n  }\n  static #_ = this.ɵfac = function AsyncAnimationRendererFactory_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AsyncAnimationRendererFactory,\n    factory: AsyncAnimationRendererFactory.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsyncAnimationRendererFactory, [{\n    type: Injectable\n  }], () => [{\n    type: Document\n  }, {\n    type: i0.RendererFactory2\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined\n  }, {\n    type: Promise\n  }], null);\n})();\n/**\n * The class allows to dynamicly switch between different renderer implementations\n * by changing the delegate renderer.\n */\nclass DynamicDelegationRenderer {\n  constructor(delegate) {\n    this.delegate = delegate;\n    // List of callbacks that need to be replayed on the animation renderer once its loaded\n    this.replay = [];\n    this.ɵtype = 1 /* AnimationRendererType.Delegated */;\n  }\n  use(impl) {\n    this.delegate = impl;\n    if (this.replay !== null) {\n      // Replay queued actions using the animation renderer to apply\n      // all events and properties collected while loading was in progress.\n      for (const fn of this.replay) {\n        fn(impl);\n      }\n      // Set to `null` to indicate that the queue was processed\n      // and we no longer need to collect events and properties.\n      this.replay = null;\n    }\n  }\n  get data() {\n    return this.delegate.data;\n  }\n  destroy() {\n    this.replay = null;\n    this.delegate.destroy();\n  }\n  createElement(name, namespace) {\n    return this.delegate.createElement(name, namespace);\n  }\n  createComment(value) {\n    return this.delegate.createComment(value);\n  }\n  createText(value) {\n    return this.delegate.createText(value);\n  }\n  get destroyNode() {\n    return this.delegate.destroyNode;\n  }\n  appendChild(parent, newChild) {\n    this.delegate.appendChild(parent, newChild);\n  }\n  insertBefore(parent, newChild, refChild, isMove) {\n    this.delegate.insertBefore(parent, newChild, refChild, isMove);\n  }\n  removeChild(parent, oldChild, isHostElement) {\n    this.delegate.removeChild(parent, oldChild, isHostElement);\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n  }\n  parentNode(node) {\n    return this.delegate.parentNode(node);\n  }\n  nextSibling(node) {\n    return this.delegate.nextSibling(node);\n  }\n  setAttribute(el, name, value, namespace) {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n  removeAttribute(el, name, namespace) {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n  addClass(el, name) {\n    this.delegate.addClass(el, name);\n  }\n  removeClass(el, name) {\n    this.delegate.removeClass(el, name);\n  }\n  setStyle(el, style, value, flags) {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n  removeStyle(el, style, flags) {\n    this.delegate.removeStyle(el, style, flags);\n  }\n  setProperty(el, name, value) {\n    // We need to keep track of animation properties set on default renderer\n    // So we can also set them also on the animation renderer\n    if (this.shouldReplay(name)) {\n      this.replay.push(renderer => renderer.setProperty(el, name, value));\n    }\n    this.delegate.setProperty(el, name, value);\n  }\n  setValue(node, value) {\n    this.delegate.setValue(node, value);\n  }\n  listen(target, eventName, callback) {\n    // We need to keep track of animation events registred by the default renderer\n    // So we can also register them against the animation renderer\n    if (this.shouldReplay(eventName)) {\n      this.replay.push(renderer => renderer.listen(target, eventName, callback));\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n  shouldReplay(propOrEventName) {\n    //`null` indicates that we no longer need to collect events and properties\n    return this.replay !== null && propOrEventName.startsWith(ANIMATION_PREFIX);\n  }\n}\n\n/**\n * Returns the set of [dependency-injection providers](guide/glossary#provider)\n * to enable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * When you use this function instead of the eager `provideAnimations()`, animations won't be\n * renderered until the renderer is loaded.\n *\n * @usageNotes\n *\n * The function is useful when you want to enable animations in an application\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\n * providers returned by this function to the `providers` list as show below.\n *\n * ```typescript\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideAnimationsAsync()\n *   ]\n * });\n * ```\n *\n * @param type pass `'noop'` as argument to disable animations.\n *\n * @publicApi\n * @developerPreview\n */\nfunction provideAnimationsAsync(type = 'animations') {\n  ɵperformanceMarkFeature('NgAsyncAnimations');\n  return makeEnvironmentProviders([{\n    provide: RendererFactory2,\n    useFactory: (doc, renderer, zone) => {\n      return new AsyncAnimationRendererFactory(doc, renderer, zone, type);\n    },\n    deps: [DOCUMENT, ɵDomRendererFactory2, NgZone]\n  }, {\n    provide: ANIMATION_MODULE_TYPE,\n    useValue: type === 'noop' ? 'NoopAnimations' : 'BrowserAnimations'\n  }]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideAnimationsAsync, AsyncAnimationRendererFactory as ɵAsyncAnimationRendererFactory };","map":{"version":3,"names":["DOCUMENT","i0","inject","ɵChangeDetectionScheduler","ɵRuntimeError","Injectable","ɵperformanceMarkFeature","makeEnvironmentProviders","RendererFactory2","NgZone","ANIMATION_MODULE_TYPE","ɵDomRendererFactory2","ANIMATION_PREFIX","AsyncAnimationRendererFactory","constructor","doc","delegate","zone","animationType","moduleImpl","_rendererFactoryPromise","scheduler","optional","ngOnDestroy","_engine","flush","loadImpl","catch","e","ngDevMode","then","ɵcreateEngine","ɵAnimationRendererFactory","rendererFactory","createRenderer","hostElement","rendererType","renderer","ɵtype","throwOnSyntheticProps","dynamicRenderer","DynamicDelegationRenderer","data","animationRendererFactory","animationRenderer","use","begin","end","whenRenderingDone","Promise","resolve","_","ɵfac","AsyncAnimationRendererFactory_Factory","t","ɵɵinvalidFactory","_2","ɵprov","ɵɵdefineInjectable","token","factory","ɵsetClassMetadata","type","Document","undefined","replay","impl","fn","destroy","createElement","name","namespace","createComment","value","createText","destroyNode","appendChild","parent","newChild","insertBefore","refChild","isMove","removeChild","oldChild","isHostElement","selectRootElement","selectorOrNode","preserveContent","parentNode","node","nextSibling","setAttribute","el","removeAttribute","addClass","removeClass","setStyle","style","flags","removeStyle","setProperty","shouldReplay","push","setValue","listen","target","eventName","callback","propOrEventName","startsWith","provideAnimationsAsync","provide","useFactory","deps","useValue","ɵAsyncAnimationRendererFactory"],"sources":["/Users/danamas/project-nando/chuyu/node_modules/@angular/platform-browser/fesm2022/animations/async.mjs"],"sourcesContent":["/**\n * @license Angular v17.3.8\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ɵChangeDetectionScheduler, ɵRuntimeError, Injectable, ɵperformanceMarkFeature, makeEnvironmentProviders, RendererFactory2, NgZone, ANIMATION_MODULE_TYPE } from '@angular/core';\nimport { ɵDomRendererFactory2 } from '@angular/platform-browser';\n\nconst ANIMATION_PREFIX = '@';\nclass AsyncAnimationRendererFactory {\n    /**\n     *\n     * @param moduleImpl allows to provide a mock implmentation (or will load the animation module)\n     */\n    constructor(doc, delegate, zone, animationType, moduleImpl) {\n        this.doc = doc;\n        this.delegate = delegate;\n        this.zone = zone;\n        this.animationType = animationType;\n        this.moduleImpl = moduleImpl;\n        this._rendererFactoryPromise = null;\n        this.scheduler = inject(ɵChangeDetectionScheduler, { optional: true });\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        // When the root view is removed, the renderer defers the actual work to the\n        // `TransitionAnimationEngine` to do this, and the `TransitionAnimationEngine` doesn't actually\n        // remove the DOM node, but just calls `markElementAsRemoved()`. The actual DOM node is not\n        // removed until `TransitionAnimationEngine` \"flushes\".\n        // Note: we already flush on destroy within the `InjectableAnimationEngine`. The injectable\n        // engine is not provided when async animations are used.\n        this._engine?.flush();\n    }\n    /**\n     * @internal\n     */\n    loadImpl() {\n        const moduleImpl = this.moduleImpl ?? import('@angular/animations/browser');\n        return moduleImpl\n            .catch((e) => {\n            throw new ɵRuntimeError(5300 /* RuntimeErrorCode.ANIMATION_RENDERER_ASYNC_LOADING_FAILURE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Async loading for animations package was ' +\n                    'enabled, but loading failed. Angular falls back to using regular rendering. ' +\n                    'No animations will be displayed and their styles won\\'t be applied.');\n        })\n            .then(({ ɵcreateEngine, ɵAnimationRendererFactory }) => {\n            // We can't create the renderer yet because we might need the hostElement and the type\n            // Both are provided in createRenderer().\n            this._engine = ɵcreateEngine(this.animationType, this.doc, this.scheduler);\n            const rendererFactory = new ɵAnimationRendererFactory(this.delegate, this._engine, this.zone);\n            this.delegate = rendererFactory;\n            return rendererFactory;\n        });\n    }\n    /**\n     * This method is delegating the renderer creation to the factories.\n     * It uses default factory while the animation factory isn't loaded\n     * and will rely on the animation factory once it is loaded.\n     *\n     * Calling this method will trigger as side effect the loading of the animation module\n     * if the renderered component uses animations.\n     */\n    createRenderer(hostElement, rendererType) {\n        const renderer = this.delegate.createRenderer(hostElement, rendererType);\n        if (renderer.ɵtype === 0 /* AnimationRendererType.Regular */) {\n            // The factory is already loaded, this is an animation renderer\n            return renderer;\n        }\n        // We need to prevent the DomRenderer to throw an error because of synthetic properties\n        if (typeof renderer.throwOnSyntheticProps === 'boolean') {\n            renderer.throwOnSyntheticProps = false;\n        }\n        // Using a dynamic renderer to switch the renderer implementation once the module is loaded.\n        const dynamicRenderer = new DynamicDelegationRenderer(renderer);\n        // Kick off the module loading if the component uses animations but the module hasn't been\n        // loaded yet.\n        if (rendererType?.data?.['animation'] && !this._rendererFactoryPromise) {\n            this._rendererFactoryPromise = this.loadImpl();\n        }\n        this._rendererFactoryPromise\n            ?.then((animationRendererFactory) => {\n            const animationRenderer = animationRendererFactory.createRenderer(hostElement, rendererType);\n            dynamicRenderer.use(animationRenderer);\n        })\n            .catch(e => {\n            // Permanently use regular renderer when loading fails.\n            dynamicRenderer.use(renderer);\n        });\n        return dynamicRenderer;\n    }\n    begin() {\n        this.delegate.begin?.();\n    }\n    end() {\n        this.delegate.end?.();\n    }\n    whenRenderingDone() {\n        return this.delegate.whenRenderingDone?.() ?? Promise.resolve();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: AsyncAnimationRendererFactory, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: AsyncAnimationRendererFactory }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: AsyncAnimationRendererFactory, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: Document }, { type: i0.RendererFactory2 }, { type: i0.NgZone }, { type: undefined }, { type: Promise }] });\n/**\n * The class allows to dynamicly switch between different renderer implementations\n * by changing the delegate renderer.\n */\nclass DynamicDelegationRenderer {\n    constructor(delegate) {\n        this.delegate = delegate;\n        // List of callbacks that need to be replayed on the animation renderer once its loaded\n        this.replay = [];\n        this.ɵtype = 1 /* AnimationRendererType.Delegated */;\n    }\n    use(impl) {\n        this.delegate = impl;\n        if (this.replay !== null) {\n            // Replay queued actions using the animation renderer to apply\n            // all events and properties collected while loading was in progress.\n            for (const fn of this.replay) {\n                fn(impl);\n            }\n            // Set to `null` to indicate that the queue was processed\n            // and we no longer need to collect events and properties.\n            this.replay = null;\n        }\n    }\n    get data() {\n        return this.delegate.data;\n    }\n    destroy() {\n        this.replay = null;\n        this.delegate.destroy();\n    }\n    createElement(name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    }\n    createComment(value) {\n        return this.delegate.createComment(value);\n    }\n    createText(value) {\n        return this.delegate.createText(value);\n    }\n    get destroyNode() {\n        return this.delegate.destroyNode;\n    }\n    appendChild(parent, newChild) {\n        this.delegate.appendChild(parent, newChild);\n    }\n    insertBefore(parent, newChild, refChild, isMove) {\n        this.delegate.insertBefore(parent, newChild, refChild, isMove);\n    }\n    removeChild(parent, oldChild, isHostElement) {\n        this.delegate.removeChild(parent, oldChild, isHostElement);\n    }\n    selectRootElement(selectorOrNode, preserveContent) {\n        return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n    }\n    parentNode(node) {\n        return this.delegate.parentNode(node);\n    }\n    nextSibling(node) {\n        return this.delegate.nextSibling(node);\n    }\n    setAttribute(el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    removeAttribute(el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    addClass(el, name) {\n        this.delegate.addClass(el, name);\n    }\n    removeClass(el, name) {\n        this.delegate.removeClass(el, name);\n    }\n    setStyle(el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    removeStyle(el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    }\n    setProperty(el, name, value) {\n        // We need to keep track of animation properties set on default renderer\n        // So we can also set them also on the animation renderer\n        if (this.shouldReplay(name)) {\n            this.replay.push((renderer) => renderer.setProperty(el, name, value));\n        }\n        this.delegate.setProperty(el, name, value);\n    }\n    setValue(node, value) {\n        this.delegate.setValue(node, value);\n    }\n    listen(target, eventName, callback) {\n        // We need to keep track of animation events registred by the default renderer\n        // So we can also register them against the animation renderer\n        if (this.shouldReplay(eventName)) {\n            this.replay.push((renderer) => renderer.listen(target, eventName, callback));\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n    shouldReplay(propOrEventName) {\n        //`null` indicates that we no longer need to collect events and properties\n        return this.replay !== null && propOrEventName.startsWith(ANIMATION_PREFIX);\n    }\n}\n\n/**\n * Returns the set of [dependency-injection providers](guide/glossary#provider)\n * to enable animations in an application. See [animations guide](guide/animations)\n * to learn more about animations in Angular.\n *\n * When you use this function instead of the eager `provideAnimations()`, animations won't be\n * renderered until the renderer is loaded.\n *\n * @usageNotes\n *\n * The function is useful when you want to enable animations in an application\n * bootstrapped using the `bootstrapApplication` function. In this scenario there\n * is no need to import the `BrowserAnimationsModule` NgModule at all, just add\n * providers returned by this function to the `providers` list as show below.\n *\n * ```typescript\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideAnimationsAsync()\n *   ]\n * });\n * ```\n *\n * @param type pass `'noop'` as argument to disable animations.\n *\n * @publicApi\n * @developerPreview\n */\nfunction provideAnimationsAsync(type = 'animations') {\n    ɵperformanceMarkFeature('NgAsyncAnimations');\n    return makeEnvironmentProviders([\n        {\n            provide: RendererFactory2,\n            useFactory: (doc, renderer, zone) => {\n                return new AsyncAnimationRendererFactory(doc, renderer, zone, type);\n            },\n            deps: [DOCUMENT, ɵDomRendererFactory2, NgZone],\n        },\n        {\n            provide: ANIMATION_MODULE_TYPE,\n            useValue: type === 'noop' ? 'NoopAnimations' : 'BrowserAnimations',\n        },\n    ]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation browser package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { provideAnimationsAsync, AsyncAnimationRendererFactory as ɵAsyncAnimationRendererFactory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}